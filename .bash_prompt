#!/bin/bash
# Fancy bash prompt

# Set colors
# Check if the terminal is xterm or GNOME
if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color > /dev/null 2>&1; then
  export TERM=gnome-256color
elif infocmp xterm-256color > /dev/null 2>&1; then
  export TERM=xterm-256color
fi

if tput setaf 1 &> /dev/null; then  # if the term has tput colours…
  # return to base styling (not bold, not italic, not underlined)
  tput sgr0
  # store tput colours & styles as human-friendly variables
  if [[ $(tput colors) -ge 256 ]] 2>/dev/null; then
    MAGENTA=$(tput setaf 9)
    ORANGE=$(tput setaf 172)
    GREEN=$(tput setaf 190)
    PURPLE=$(tput setaf 141)
    GREY=$(tput setaf 238)
    WHITE=$(tput setaf 255)
  else
    MAGENTA=$(tput setaf 1)
    ORANGE=$(tput setaf 3)
    GREEN=$(tput setaf 2)
    PURPLE=$(tput setaf 5)
    GREY=$(tput setaf 6)
    WHITE=$(tput setaf 7)
  fi
  RESET=$(tput sgr0)
else
  # http://linuxtidbits.wordpress.com/2008/08/13/output-color-on-bash-scripts-advanced/
  MAGENTA="\033[1;31m"
  ORANGE="\033[1;33m"
  GREEN="\033[1;32m"
  PURPLE="\033[1;35m"
  GREY="\033[1;30m"
  WHITE="\033[1;37m"
  RESET="\033[m"
fi

# adapted from https://raw.githubusercontent.com/paulirish/dotfiles/master/.bash_prompt
function prompt_git() {
    # check if we're in a git repo. (fast)
    git rev-parse --is-inside-work-tree &>/dev/null || return

    # check for what branch we're on. (fast)
    #   if… HEAD isn’t a symbolic ref (typical branch),
    #   then… get a tracking remote branch or tag
    #   otherwise… get the short SHA for the latest commit
    #   lastly just give up.
    branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
        git describe --all --exact-match HEAD 2> /dev/null || \
        git rev-parse --short HEAD 2> /dev/null || \
        echo '(unknown)')";


    # check if it's dirty (slow)
    #   technique via github.com/git/git/blob/355d4e173/contrib/completion/git-prompt.sh#L472-L475
    dirty=$(git diff --no-ext-diff --quiet --ignore-submodules --exit-code || echo -e "*")


    [ -n "${s}" ] && s=" [${s}]";
    echo -e " ${GREY}(${WHITE}${branchName}${ORANGE}$dirty${GREY})";

    return
}

PS1="\[\e]2;\h::\]\w\[\a\]";    # hostname::current path
PS1+="\[\e]1;\]$(basename $(dirname $PWD))/\W\[\a\]";  # (..pwd)/pwd
PS1+="\n";
PS1+="\[$MAGENTA\]\u\[$GREY\]@\[$PURPLE\]\h\[$GREY\]:\[$GREEN\]\w";
PS1+="\$(prompt_git)";
# WTF hack https://stackoverflow.com/questions/33220492/ps1-bash-command-substitution-not-working-on-windows-10
PS1+=$'\n';
PS1+="\[$GREY\]\$\[$RESET\] ";

export PS1;